{"version":3,"file":"options.js","mappingsxgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;AC3DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACNA;AACA;AACA;AACA;AACA;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;AEhDA;AACA;AACA;AACA;AACA","sources":["webpack://domhacks-utility/./src/model/deck.ts","webpack://domhacks-utility/./src/options/components/CardRow.tsx","webpack://domhacks-utility/./src/options/components/ChromeStorageInterface.tsx","webpack://domhacks-utility/./src/options/components/CurrentGame.tsx","webpack://domhacks-utility/./src/options/components/DecklistView.tsx","webpack://domhacks-utility/./src/options/components/DiscardFrame.tsx","webpack://domhacks-utility/./src/options/components/HandView.tsx","webpack://domhacks-utility/./src/options/components/InPlayView.tsx","webpack://domhacks-utility/./src/options/components/LibraryView.tsx","webpack://domhacks-utility/./src/options/components/TrashView.tsx","webpack://domhacks-utility/./src/options/index.tsx","webpack://domhacks-utility/./src/options/options.tsx","webpack://domhacks-utility/./src/options/redux/optionsSlice.ts","webpack://domhacks-utility/./src/options/redux/store.ts","webpack://domhacks-utility/./src/options/utils/utilityFunctions.tsx","webpack://domhacks-utility/webpack/bootstrap","webpack://domhacks-utility/webpack/runtime/chunk loaded","webpack://domhacks-utility/webpack/runtime/compat get default export","webpack://domhacks-utility/webpack/runtime/define property getters","webpack://domhacks-utility/webpack/runtime/global","webpack://domhacks-utility/webpack/runtime/hasOwnProperty shorthand","webpack://domhacks-utility/webpack/runtime/make namespace object","webpack://domhacks-utility/webpack/runtime/node module decorator","webpack://domhacks-utility/webpack/runtime/jsonp chunk loading","webpack://domhacks-utility/webpack/before-startup","webpack://domhacks-utility/webpack/startup","webpack://domhacks-utility/webpack/after-startup"],"sourcesContent":["export class Deck {\r\n    constructor(playerName, abbrvName, kingdom) {\r\n        this.entireDeck = [];\r\n        this.playerName = \"\";\r\n        this.abbrvName = \"\";\r\n        this.currentVP = 3;\r\n        this.kingdom = [];\r\n        this.library = [];\r\n        this.graveyard = [];\r\n        this.inPlay = [];\r\n        this.hand = [];\r\n        this.trash = [];\r\n        this.lastEntryProcessed = \"\";\r\n        this.logArchive = [];\r\n        this.DOMLog = [];\r\n        this.checkForCleanUp = (line) => {\r\n            let needCleanUp = false;\r\n            // need a cleanup detector\r\n            // if there are exactly 5 draws in the next entry then a cleanup MAY be required before drawing.\r\n            let drawCount = 0;\r\n            if (this.abbrvName.match(/\\ban?\\b/g)) {\r\n                drawCount -= this.abbrvName.match(/\\ban?\\b/g).length;\r\n            }\r\n            if (line.match(/\\ban?\\b/g)) {\r\n                drawCount += line.match(/\\ban?\\b/g).length;\r\n            }\r\n            (line.match(/\\d/g) || []).forEach((n) => {\r\n                drawCount += parseInt(n);\r\n            });\r\n            if (drawCount == 5) {\r\n                needCleanUp = true;\r\n            }\r\n            return needCleanUp;\r\n        };\r\n        this.checkForShuffle = (line) => {\r\n            return line.match(\"shuffles their deck\");\r\n        };\r\n        this.checkForCellarDraw = () => {\r\n            let cellarDraws = false;\r\n            if (this.logArchive.length > 3 &&\r\n                this.logArchive[this.logArchive.length - 3].match(\" plays a Cellar\")) {\r\n                cellarDraws = true;\r\n            }\r\n            return cellarDraws;\r\n        };\r\n        this.checkForBanditTrash = (line) => {\r\n            let banditTrash = false;\r\n            let len = this.logArchive.length;\r\n            if (this.logArchive[len - 1].match(\" reveals \")) {\r\n                banditTrash = true;\r\n            }\r\n            return banditTrash;\r\n        };\r\n        this.checkForBanditDiscard = (line) => {\r\n            let banditDiscard = false;\r\n            let len = this.logArchive.length;\r\n            if ((this.logArchive[len - 1].match(\" trashes \") &&\r\n                this.logArchive[len - 2].match(\" reveals \")) ||\r\n                this.logArchive[len - 1].match(\" reveals \")) {\r\n                banditDiscard = true;\r\n            }\r\n            else {\r\n                console.log(\"not a bandit Discard\");\r\n            }\r\n            return banditDiscard;\r\n        };\r\n        this.playerName = playerName;\r\n        this.kingdom = kingdom;\r\n        this.abbrvName = abbrvName;\r\n        for (let i = 0; i < 7; i++) {\r\n            if (i < 3) {\r\n                this.entireDeck.push(\"Estate\");\r\n                this.library.push(\"Estate\");\r\n            }\r\n            this.entireDeck.push(\"Copper\");\r\n            this.library.push(\"Copper\");\r\n        }\r\n    }\r\n    setPlayerName(name) {\r\n        this.playerName = name;\r\n    }\r\n    getPlayerName() {\r\n        return this.playerName;\r\n    }\r\n    setAbbvbName(abbrvName) {\r\n        this.abbrvName = abbrvName;\r\n    }\r\n    getAbbrvName() {\r\n        return this.abbrvName;\r\n    }\r\n    setCurrentVP(vp) {\r\n        this.currentVP = vp;\r\n    }\r\n    getCurrentVP() {\r\n        return this.currentVP;\r\n    }\r\n    setKingdom(kingdom) {\r\n        this.kingdom = kingdom;\r\n    }\r\n    getKingdom() {\r\n        return this.kingdom;\r\n    }\r\n    setLibrary(lib) {\r\n        this.library = lib;\r\n    }\r\n    getLibrary() {\r\n        return this.library;\r\n    }\r\n    setGraveyard(gy) {\r\n        this.graveyard = gy;\r\n    }\r\n    getGraveyard() {\r\n        return this.graveyard;\r\n    }\r\n    setInPlay(inPlay) {\r\n        this.inPlay = inPlay;\r\n    }\r\n    getInPlay() {\r\n        return this.inPlay;\r\n    }\r\n    setHand(hand) {\r\n        this.hand = hand;\r\n    }\r\n    getHand() {\r\n        return this.hand;\r\n    }\r\n    setTrash(trash) {\r\n        this.trash = trash;\r\n    }\r\n    getTrash() {\r\n        return this.trash;\r\n    }\r\n    setLogArchive(logArchive) {\r\n        this.logArchive = logArchive;\r\n    }\r\n    getLogArchive() {\r\n        return this.logArchive;\r\n    }\r\n    setDOMlog(DOMlog) {\r\n        this.DOMLog = DOMlog;\r\n    }\r\n    getDOMlog() {\r\n        return this.DOMLog;\r\n    }\r\n    getEntireDeck() {\r\n        return this.entireDeck;\r\n    }\r\n    setEntireDeck(deck) {\r\n        this.entireDeck = deck;\r\n    }\r\n    update(log) {\r\n        const actionArray = [\r\n            \"shuffles their deck\",\r\n            \"gains\",\r\n            \"draws\",\r\n            \"discards\",\r\n            \"plays\",\r\n            \"trashes\",\r\n            \"looks at\",\r\n            \"topdecks\",\r\n        ];\r\n        const pluralVariantCandidates = [\r\n            \"Smithy\",\r\n            \"Sentry\",\r\n            \"Laboratory\",\r\n            \"Library\",\r\n            \"Dutchy\",\r\n        ];\r\n        log.forEach((line, idx, array) => {\r\n            console.log(\"line being processed: \", line);\r\n            let act = \"\";\r\n            let cards = [];\r\n            let numberOfCards = [];\r\n            actionArray.forEach((action) => {\r\n                if (line.match(action)) {\r\n                    act = action;\r\n                }\r\n            });\r\n            this.kingdom.forEach((card) => {\r\n                let pluralVariant = \"\";\r\n                let pluralVariantBoolean = false;\r\n                if (pluralVariantCandidates.indexOf(card) >= 0) {\r\n                    pluralVariant = card.substring(0, card.length - 1) + \"ies\";\r\n                    if (line.match(pluralVariant))\r\n                        pluralVariantBoolean = true;\r\n                }\r\n                if (pluralVariantBoolean ? line.match(pluralVariant) : line.match(card)) {\r\n                    const amountChar = line.substring(pluralVariantBoolean\r\n                        ? line.indexOf(pluralVariant) - 2\r\n                        : line.indexOf(card) - 2, pluralVariantBoolean\r\n                        ? line.indexOf(pluralVariant) - 1\r\n                        : line.indexOf(card) - 1);\r\n                    let amount = 0;\r\n                    if (amountChar == \"n\" || amountChar == \"a\") {\r\n                        amount = 1;\r\n                    }\r\n                    else {\r\n                        amount = parseInt(amountChar);\r\n                    }\r\n                    cards.push(card);\r\n                    numberOfCards.push(amount);\r\n                }\r\n            });\r\n            switch (act) {\r\n                case \"shuffles their deck\":\r\n                    {\r\n                        const cleanUp = this.checkForCleanUp(array[idx + 1]);\r\n                        const cellarDraws = this.checkForCellarDraw();\r\n                        if (cleanUp && !cellarDraws)\r\n                            this.cleanup();\r\n                        this.shuffleGraveYardIntoLibrary();\r\n                    }\r\n                    break;\r\n                case \"gains\":\r\n                    {\r\n                        const mineGain = this.checkForMineGain();\r\n                        for (let i = 0; i < cards.length; i++) {\r\n                            for (let j = 0; j < numberOfCards[i]; j++) {\r\n                                if (mineGain) {\r\n                                    this.gainIntoHand(cards[i]);\r\n                                }\r\n                                else {\r\n                                    this.gain(cards[i]);\r\n                                }\r\n                                this.addCardToEntireDeck(cards[i]);\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"draws\":\r\n                    {\r\n                        const fiveDrawsOccured = this.checkForCleanUp(line);\r\n                        const shuffleOccured = this.checkForShuffle(this.lastEntryProcessed);\r\n                        const cellarDraws = this.checkForCellarDraw();\r\n                        if (fiveDrawsOccured && !shuffleOccured && !cellarDraws) {\r\n                            console.log(\"Current line calls for cleanup, and previous line wasnt a shuffle.  Need to clean up before drawing\");\r\n                            this.cleanup();\r\n                        }\r\n                        else {\r\n                            if (cellarDraws)\r\n                                console.log(\"five draws occured but iit was from a cellar\");\r\n                            if (shuffleOccured)\r\n                                console.log(\"Current line calls for cleanup, but last line was a shuffle, and cleanup already occured.\");\r\n                        }\r\n                        for (let i = 0; i < cards.length; i++) {\r\n                            for (let j = 0; j < numberOfCards[i]; j++) {\r\n                                this.draw(cards[i]);\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"discards\":\r\n                    {\r\n                        const sentryDiscard = this.checkForSentryDiscard();\r\n                        const banditDiscard = this.checkForBanditDiscard(line);\r\n                        const vassalDiscard = this.checkForVassalDiscard();\r\n                        for (let i = 0; i < cards.length; i++) {\r\n                            for (let j = 0; j < numberOfCards[i]; j++) {\r\n                                if (sentryDiscard || banditDiscard || vassalDiscard) {\r\n                                    this.discardFromLibrary(cards[i]);\r\n                                }\r\n                                else {\r\n                                    this.discard(cards[i]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"plays\":\r\n                    {\r\n                        const throneRoomPlay = line.match(\" again.\");\r\n                        const vassalPlay = this.checkForVassalPlay();\r\n                        for (let i = 0; i < cards.length; i++) {\r\n                            for (let j = 0; j < numberOfCards[i]; j++) {\r\n                                if (throneRoomPlay) {\r\n                                    console.log(\"Throne room play.  No deck change.\");\r\n                                }\r\n                                else if (vassalPlay) {\r\n                                    this.playFromDiscard(cards[i]);\r\n                                }\r\n                                else {\r\n                                    this.play(cards[i]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"trashes\":\r\n                    {\r\n                        const sentryTrash = this.checkForSentryTrash();\r\n                        const banditTrash = this.checkForBanditTrash(line);\r\n                        for (let i = 0; i < cards.length; i++) {\r\n                            for (let j = 0; j < numberOfCards[i]; j++) {\r\n                                if (sentryTrash || banditTrash) {\r\n                                    console.log(\"Trash from lib\");\r\n                                    this.trashFromLibrary(cards[i]);\r\n                                }\r\n                                else {\r\n                                    console.log(\"Trash from hand\");\r\n                                    this.trashFromHand(cards[i]);\r\n                                }\r\n                                this.removeCardFromEntireDeck(cards[i]);\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                case \"topdecks\":\r\n                    {\r\n                        const harbingerTopDeck = this.checkForHarbingerTopDeck();\r\n                        for (let i = 0; i < cards.length; i++) {\r\n                            for (let j = 0; j < numberOfCards[i]; j++) {\r\n                                if (harbingerTopDeck) {\r\n                                    this.topDeckFromGraveyard(cards[i]);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                    break;\r\n                default:\r\n                    console.log(\"no matching action for \", act);\r\n            }\r\n            this.lastEntryProcessed = line;\r\n            this.logArchive.push(line);\r\n        });\r\n    }\r\n    // State change functions\r\n    draw(card) {\r\n        const index = this.library.indexOf(card);\r\n        if (index > -1) {\r\n            console.log(`ACTION Drawing ${card} from library into hand`);\r\n            this.library.splice(index, 1);\r\n            this.hand.push(card);\r\n        }\r\n        else {\r\n            console.log(`No ${card} in deck`);\r\n        }\r\n    }\r\n    play(card) {\r\n        const index = this.hand.indexOf(card);\r\n        if (index > -1) {\r\n            console.log(`ACTION Playing ${card} from hand into play`);\r\n            this.hand.splice(index, 1);\r\n            this.inPlay.push(card);\r\n        }\r\n        else {\r\n            console.log(`No ${card} in hand`);\r\n        }\r\n    }\r\n    addCardToEntireDeck(card) {\r\n        this.entireDeck.push(card);\r\n    }\r\n    removeCardFromEntireDeck(card) {\r\n        const index = this.entireDeck.indexOf(card);\r\n        if (index > -1) {\r\n            this.entireDeck.splice(index, 1);\r\n        }\r\n        else {\r\n            console.log `No ${card} in the decklist`;\r\n        }\r\n    }\r\n    shuffle() {\r\n        console.log(\"ACTION Shuffling discard into deck\");\r\n        let currentIndex = this.library.length, randomIndex;\r\n        // While there remain elements to shuffle.\r\n        while (currentIndex != 0) {\r\n            // Pick a remaining element.\r\n            randomIndex = Math.floor(Math.random() * currentIndex);\r\n            currentIndex--;\r\n            // And swap it with the current element.\r\n            [this.library[currentIndex], this.library[randomIndex]] = [\r\n                this.library[randomIndex],\r\n                this.library[currentIndex],\r\n            ];\r\n        }\r\n    }\r\n    topDeckFromGraveyard(card) {\r\n        const index = this.graveyard.indexOf(card);\r\n        if (index > -1) {\r\n            this.graveyard.splice(index, 1);\r\n            this.library.push(card);\r\n            console.log(`ACTION Topdeck ${card} from discard`);\r\n        }\r\n        else {\r\n            console.log(`No ${card} in discard`);\r\n        }\r\n    }\r\n    playFromDiscard(card) {\r\n        const index = this.graveyard.indexOf(card);\r\n        if (index > -1) {\r\n            console.log(`ACTION Playing ${card} from discard`);\r\n            this.inPlay.push(card);\r\n            this.graveyard.splice(index, 1);\r\n        }\r\n        else {\r\n            console.log(`No ${card} in discard pile`);\r\n        }\r\n    }\r\n    shuffleGraveYardIntoLibrary() {\r\n        let i = this.graveyard.length - 1;\r\n        for (i; i >= 0; i--) {\r\n            console.log(`ACTION Shuffling ${this.graveyard[i]} from graveyard into library`);\r\n            this.library.push(this.graveyard[i]);\r\n            this.graveyard.splice(i, 1);\r\n            this.shuffle();\r\n        }\r\n    }\r\n    cleanup() {\r\n        console.log(\"Cleaning up\");\r\n        let i = this.inPlay.length - 1;\r\n        let j = this.hand.length - 1;\r\n        for (i; i >= 0; i--) {\r\n            console.log(`ACTION Cleaning ${this.inPlay[i]} from in play into into discard`);\r\n            this.graveyard.push(this.inPlay[i]);\r\n            this.inPlay.splice(i, 1);\r\n        }\r\n        for (j; j >= 0; j--) {\r\n            console.log(`ACTION Cleaning ${this.hand[j]} from hand into discard`);\r\n            this.graveyard.push(this.hand[j]);\r\n            this.hand.splice(j, 1);\r\n        }\r\n    }\r\n    gain(card) {\r\n        console.log(`ACTION Gaining ${card} into discard`);\r\n        this.graveyard.push(card);\r\n    }\r\n    gainIntoHand(card) {\r\n        console.log(`ACTION Gaining ${card} into hand`);\r\n        this.hand.push(card);\r\n    }\r\n    topDeckCardFromHand(card) {\r\n        const index = this.hand.indexOf(card);\r\n        if (index > -1) {\r\n            console.log(`ACTION Topdecking ${this.hand[index]}`);\r\n            this.library.push(this.hand[index]);\r\n            this.hand.splice(index, 1);\r\n        }\r\n        else {\r\n            console.log(`No ${card} in hand`);\r\n        }\r\n    }\r\n    discard(card) {\r\n        const index = this.hand.indexOf(card);\r\n        if (index > -1) {\r\n            console.log(`ACTION Discarding ${this.hand[index]} from hand into discard}`);\r\n            this.graveyard.push(this.hand[index]);\r\n            this.hand.splice(index, 1);\r\n        }\r\n        else {\r\n            console.log(`No ${card} in hand.`);\r\n        }\r\n    }\r\n    discardFromLibrary(card) {\r\n        const index = this.library.indexOf(card);\r\n        if (index > -1) {\r\n            console.log(`ACTION dDscarding ${this.library[index]} from library into discard}`);\r\n            this.graveyard.push(this.library[index]);\r\n            this.library.splice(index, 1);\r\n        }\r\n        else {\r\n            console.log(`No ${card} in library.`);\r\n        }\r\n    }\r\n    trashFromHand(card) {\r\n        const index = this.hand.indexOf(card);\r\n        if (index > -1) {\r\n            console.log(`Trashing ${this.hand[index]} from hand}`);\r\n            this.trash.push(this.hand[index]);\r\n            this.hand.splice(index, 1);\r\n        }\r\n        else {\r\n            console.log(`No ${card} in hand.`);\r\n        }\r\n    }\r\n    trashFromLibrary(card) {\r\n        const index = this.library.indexOf(card);\r\n        if (index > -1) {\r\n            console.log(`Trashing ${this.library[index]} from library`);\r\n            this.trash.push(this.library[index]);\r\n            this.library.splice(index, 1);\r\n        }\r\n        else {\r\n            console.log(`No ${card} in library`);\r\n        }\r\n    }\r\n    //Check Functions\r\n    checkForMineGain() {\r\n        let len = this.logArchive.length;\r\n        return this.logArchive[len - 2].match(\" plays a Mine\");\r\n    }\r\n    checkForHarbingerTopDeck() {\r\n        const len = this.logArchive.length;\r\n        return (this.logArchive[len - 4].match(\" plays a Harbinger\") ||\r\n            (this.logArchive[len - 5].match(\" plays a Harbinger\") &&\r\n                this.logArchive[len - 4].match(\" shuffles their deck\")));\r\n    }\r\n    checkForSentryDiscard() {\r\n        const len = this.logArchive.length;\r\n        return (this.logArchive[len - 4].match(\" plays a Sentry\") ||\r\n            this.logArchive[len - 5].match(\" plays a Sentry\") ||\r\n            (this.logArchive[len - 6].match(\" plays a Sentry\") &&\r\n                this.logArchive[len - 5].match(\" shuffles their deck\")));\r\n    }\r\n    checkForSentryTrash() {\r\n        const len = this.logArchive.length;\r\n        return (this.logArchive[len - 3].match(\" plays a Sentry\") ||\r\n            this.logArchive[len - 4].match(\" plays a Sentry\") ||\r\n            (this.logArchive[len - 5].match(\" plays a Sentry\") &&\r\n                this.logArchive[len - 4].match(\" shuffles their deck\")));\r\n    }\r\n    checkForVassalPlay() {\r\n        let vassalPlay = false;\r\n        if (this.logArchive.length > 3) {\r\n            vassalPlay =\r\n                this.logArchive[this.logArchive.length - 3].match(\" plays a Vassal\");\r\n        }\r\n        return vassalPlay;\r\n    }\r\n    checkForVassalDiscard() {\r\n        return this.logArchive[this.logArchive.length - 2].match(\" plays a Vassal\");\r\n    }\r\n}\r\n","import React from \"react\";\r\nconst CardRow = ({ cardAmount, drawProbability, cardName }) => {\r\n    return (React.createElement(\"div\", null,\r\n        React.createElement(\"span\", null,\r\n            \" \",\r\n            drawProbability,\r\n            \" \"),\r\n        React.createElement(\"span\", null,\r\n            \" \",\r\n            cardName,\r\n            \" \"),\r\n        React.createElement(\"span\", null,\r\n            \" \",\r\n            cardAmount,\r\n            \" \")));\r\n};\r\nexport default CardRow;\r\n","import React, { useEffect } from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport { setPlayerDeck, setOpponentDeck } from \"../redux/optionsSlice\";\r\nconst ChromeStorageInterface = () => {\r\n    const pDeck = useSelector((state) => state.options.playerDeck);\r\n    const oDeck = useSelector((state) => state.options.opponentDeck);\r\n    const dispatch = useDispatch();\r\n    useEffect(() => {\r\n        console.log(\"Message from Chrome Storage Interface UseEffect\");\r\n        chrome.storage.sync.get([\"playerDeck\", \"opponentDeck\"]).then((result) => {\r\n            console.log(\"First render.  Setting initial redux state.\");\r\n            //  Next step update state with results\r\n            dispatch(setPlayerDeck(JSON.parse(result.playerDeck)));\r\n            dispatch(setOpponentDeck(JSON.parse(result.opponentDeck)));\r\n        });\r\n        const storageLlistenerFunction = (changes, namespace) => {\r\n            for (let [key, { oldValue, newValue }] of Object.entries(changes)) {\r\n                // console.log(\r\n                //   `Storage key \"${key}\" in namespace \"${namespace}\" changed.`,\r\n                //   `Old value was \"${oldValue}\", new value is \"${newValue}\".`\r\n                // );\r\n                console.log(\"Storage change detected:\");\r\n                if (key === \"playerDeck\") {\r\n                    console.log(\"Dispatching setPlayerDeck\");\r\n                    dispatch(setPlayerDeck(JSON.parse(newValue)));\r\n                }\r\n                else if (key === \"opponentDeck\") {\r\n                    console.log(\"Dispatching setOpponentDeck\");\r\n                    dispatch(setOpponentDeck(JSON.parse(newValue)));\r\n                }\r\n            }\r\n        };\r\n        chrome.storage.onChanged.addListener(storageLlistenerFunction);\r\n        return function cleanup() {\r\n            chrome.storage.onChanged.removeListener(storageLlistenerFunction);\r\n        };\r\n    }, []);\r\n    const getCountsFromArray = (decklistArray) => {\r\n        const cardCountsMap = new Map();\r\n        decklistArray.forEach((card) => {\r\n            if (cardCountsMap.has(card)) {\r\n                cardCountsMap.set(card, cardCountsMap.get(card) + 1);\r\n            }\r\n            else {\r\n                cardCountsMap.set(card, 1);\r\n            }\r\n        });\r\n        return cardCountsMap;\r\n    };\r\n    return (React.createElement(\"div\", null,\r\n        \"ChromeStorageInterface\",\r\n        React.createElement(\"button\", { onClick: () => console.log(\"Testing the redux state: \", pDeck) }, \"Test player deck state\"),\r\n        React.createElement(\"button\", { onClick: () => console.log(\"Testing the redux state: \", oDeck) }, \"Test opponent deck state\"),\r\n        React.createElement(\"button\", { onClick: () => {\r\n                // console.log(\"testing functino turnDeckListIntoMap\");\r\n                console.log(\"pdeck\", pDeck);\r\n                console.log(getCountsFromArray(pDeck.entireDeck));\r\n            } }, \"Get Decklist Card Counts\")));\r\n};\r\nexport default ChromeStorageInterface;\r\n","import React from \"react\";\r\nimport HandView from \"./HandView\";\r\nimport DiscardFrame from \"./DiscardFrame\";\r\nimport LibraryView from \"./LibraryView\";\r\nimport TrashView from \"./TrashView\";\r\nimport InPlayView from \"./InPlayView\";\r\nconst CurrentGame = () => {\r\n    return (React.createElement(React.Fragment, null,\r\n        React.createElement(HandView, null),\r\n        React.createElement(\"br\", null),\r\n        React.createElement(LibraryView, null),\r\n        React.createElement(\"br\", null),\r\n        React.createElement(InPlayView, null),\r\n        React.createElement(\"br\", null),\r\n        React.createElement(DiscardFrame, null),\r\n        React.createElement(\"br\", null),\r\n        React.createElement(TrashView, null)));\r\n};\r\nexport default CurrentGame;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getCountsFromArray } from \"../utils/utilityFunctions\";\r\nimport CardRow from \"./CardRow\";\r\nconst DecklistView = () => {\r\n    const [listMap, setListMap] = useState(new Map());\r\n    const pd = useSelector((state) => state.options.playerDeck);\r\n    useEffect(() => {\r\n        setListMap(getCountsFromArray(pd.entireDeck));\r\n    }, [pd]);\r\n    return (React.createElement(React.Fragment, null,\r\n        React.createElement(\"div\", null,\r\n            \"Full Decklist \",\r\n            pd.entireDeck.length),\r\n        React.createElement(\"br\", null),\r\n        Array.from(listMap.keys()).map((card, idx) => {\r\n            return (React.createElement(CardRow, { key: idx, drawProbability: \"\", cardName: card, cardAmount: listMap.get(card) }));\r\n        })));\r\n};\r\nexport default DecklistView;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getCountsFromArray } from \"../utils/utilityFunctions\";\r\nimport CardRow from \"./CardRow\";\r\nconst DiscardFrame = () => {\r\n    const [discardMap, setDiscardMap] = useState(new Map());\r\n    const pd = useSelector((state) => state.options.playerDeck);\r\n    useEffect(() => {\r\n        setDiscardMap(getCountsFromArray(pd.graveyard));\r\n    }, [pd]);\r\n    return (React.createElement(React.Fragment, null,\r\n        React.createElement(\"div\", null,\r\n            \"Discard Pile \",\r\n            pd.graveyard.length),\r\n        React.createElement(\"br\", null),\r\n        Array.from(discardMap.keys()).map((card, idx) => {\r\n            return (React.createElement(CardRow, { key: idx, drawProbability: \"\", cardName: card, cardAmount: discardMap.get(card) }));\r\n        })));\r\n};\r\nexport default DiscardFrame;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getCountsFromArray, } from \"../utils/utilityFunctions\";\r\nimport CardRow from \"./CardRow\";\r\nconst HandView = () => {\r\n    const [handMap, setHandMap] = useState(new Map());\r\n    const pd = useSelector((state) => state.options.playerDeck);\r\n    useEffect(() => {\r\n        setHandMap(getCountsFromArray(pd.hand));\r\n    }, [pd]);\r\n    return (React.createElement(React.Fragment, null,\r\n        React.createElement(\"div\", null,\r\n            \"Hand \",\r\n            pd.hand.length),\r\n        React.createElement(\"br\", null),\r\n        Array.from(handMap.keys()).map((card, idx) => {\r\n            return (React.createElement(CardRow, { key: idx, drawProbability: \"\", cardName: card, cardAmount: handMap.get(card) }));\r\n        })));\r\n};\r\nexport default HandView;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getCountsFromArray } from \"../utils/utilityFunctions\";\r\nimport CardRow from \"./CardRow\";\r\nconst InPlayView = () => {\r\n    const [inPlayMap, setInPlayMap] = useState(new Map());\r\n    const pd = useSelector((state) => state.options.playerDeck);\r\n    useEffect(() => {\r\n        setInPlayMap(getCountsFromArray(pd.inPlay));\r\n    }, [pd]);\r\n    return (React.createElement(React.Fragment, null,\r\n        React.createElement(\"div\", null,\r\n            \"InPlay \",\r\n            pd.inPlay.length),\r\n        React.createElement(\"br\", null),\r\n        Array.from(inPlayMap.keys()).map((card, idx) => {\r\n            return (React.createElement(CardRow, { key: idx, drawProbability: \"\", cardName: card, cardAmount: inPlayMap.get(card) }));\r\n        })));\r\n};\r\nexport default InPlayView;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getCountsFromArray } from \"../utils/utilityFunctions\";\r\nimport CardRow from \"./CardRow\";\r\nconst LibraryView = () => {\r\n    const [libraryMap, setLibraryMap] = useState(new Map());\r\n    const pd = useSelector((state) => state.options.playerDeck);\r\n    useEffect(() => {\r\n        setLibraryMap(getCountsFromArray(pd.library));\r\n    }, [pd]);\r\n    return (React.createElement(React.Fragment, null,\r\n        React.createElement(\"div\", null,\r\n            \"Library \",\r\n            pd.library.length),\r\n        React.createElement(\"br\", null),\r\n        Array.from(libraryMap.keys()).map((card, idx) => {\r\n            return (React.createElement(CardRow, { key: idx, drawProbability: \"\", cardName: card, cardAmount: libraryMap.get(card) }));\r\n        })));\r\n};\r\nexport default LibraryView;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { getCountsFromArray } from \"../utils/utilityFunctions\";\r\nimport CardRow from \"./CardRow\";\r\nconst TrashView = () => {\r\n    const [trashMap, setTrashMap] = useState(new Map());\r\n    const pd = useSelector((state) => state.options.playerDeck);\r\n    useEffect(() => {\r\n        setTrashMap(getCountsFromArray(pd.trash));\r\n    }, [pd]);\r\n    return (React.createElement(React.Fragment, null,\r\n        React.createElement(\"div\", null,\r\n            \"Trash \",\r\n            pd.trash.length),\r\n        React.createElement(\"br\", null),\r\n        Array.from(trashMap.keys()).map((card, idx) => {\r\n            return (React.createElement(CardRow, { key: idx, drawProbability: \"\", cardName: card, cardAmount: trashMap.get(card) }));\r\n        })));\r\n};\r\nexport default TrashView;\r\n","import React from \"react\";\r\nimport { Provider } from \"react-redux\";\r\nimport { store } from \"./redux/store\";\r\nimport { createRoot } from \"react-dom/client\";\r\nimport { HashRouter as Router } from \"react-router-dom\";\r\nimport Options from \"./options\";\r\nconst init = () => {\r\n    const appContainer = document.createElement(\"div\");\r\n    document.body.appendChild(appContainer);\r\n    if (!appContainer) {\r\n        throw new Error(\"Can not find AppContainer\");\r\n    }\r\n    console.log(\"Init from options index\");\r\n    const root = createRoot(appContainer);\r\n    console.log(appContainer);\r\n    root.render(React.createElement(Provider, { store: store },\r\n        React.createElement(Router, null,\r\n            React.createElement(Options, null))));\r\n};\r\ninit();\r\n","import React, { useEffect } from \"react\";\r\nimport { Routes, Route } from \"react-router-dom\";\r\n// import \"../assets/tailwind.css\";\r\nimport ChromeStorageInterface from \"./components/ChromeStorageInterface\";\r\nimport CurrentGame from \"./components/CurrentGame\";\r\nimport DecklistView from \"./components/DecklistView\";\r\nconst Options = () => {\r\n    useEffect(() => {\r\n        console.log(\"From the Options component.js\");\r\n        return () => { };\r\n    }, []);\r\n    return (React.createElement(\"div\", null,\r\n        React.createElement(\"h1\", { className: \"text-4xl text-green-500\" }, \"Dom View\"),\r\n        React.createElement(\"ul\", null,\r\n            React.createElement(\"li\", null,\r\n                React.createElement(\"a\", { href: \"#/\" }, \"Full List\")),\r\n            React.createElement(\"li\", null,\r\n                React.createElement(\"a\", { href: \"#/currentGame\" }, \"Current Game\"))),\r\n        React.createElement(Routes, null,\r\n            React.createElement(Route, { path: \"/\", element: React.createElement(DecklistView, null) }),\r\n            React.createElement(Route, { path: \"/currentGame\", element: React.createElement(CurrentGame, null) })),\r\n        React.createElement(ChromeStorageInterface, null)));\r\n};\r\nexport default Options;\r\n","import { createSlice } from \"@reduxjs/toolkit\";\r\nimport { Deck } from \"../../model/deck\";\r\nconst initialState = {\r\n    playerDeck: JSON.parse(JSON.stringify(new Deck(\"emptyPlayer\", \"ep\", [\"empty Kingdom\"]))),\r\n    opponentDeck: JSON.parse(JSON.stringify(new Deck(\"emptyOpponent\", \"eo\", [\"empty Kingdom\"]))),\r\n};\r\nexport const optionsSlice = createSlice({\r\n    name: \"options\",\r\n    initialState,\r\n    reducers: {\r\n        setPlayerDeck: (state, action) => {\r\n            state.playerDeck = action.payload;\r\n        },\r\n        setOpponentDeck: (state, action) => {\r\n            state.opponentDeck = action.payload;\r\n        },\r\n    },\r\n});\r\nexport const { setPlayerDeck, setOpponentDeck } = optionsSlice.actions;\r\nexport const selectOptions = (state) => state.options;\r\nexport default optionsSlice.reducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport optionsReducer from \"./optionsSlice\";\r\nexport const store = configureStore({\r\n    reducer: {\r\n        options: optionsReducer,\r\n    },\r\n});\r\n","import { Deck } from \"../../model/deck\";\r\nexport const getCountsFromArray = (decklistArray) => {\r\n    const cardCountsMap = new Map();\r\n    decklistArray.forEach((card) => {\r\n        if (cardCountsMap.has(card)) {\r\n            cardCountsMap.set(card, cardCountsMap.get(card) + 1);\r\n        }\r\n        else {\r\n            cardCountsMap.set(card, 1);\r\n        }\r\n    });\r\n    return cardCountsMap;\r\n};\r\nexport const createDeckFromJSON = (JSONstring) => {\r\n    const deckObject = JSON.parse(JSONstring);\r\n    const deck = new Deck(deckObject.playerName, deckObject.abbrvName, deckObject.kingdom);\r\n    deck.setCurrentVP(deckObject.setCurrentVP);\r\n    // deck.setKingdom(deckObject.kingdom);\r\n    deck.setLibrary(deckObject.library);\r\n    deck.setGraveyard(deckObject.graveyard);\r\n    deck.setInPlay(deckObject.inPlay);\r\n    deck.setHand(deckObject.hand);\r\n    deck.setTrash(deckObject.trash);\r\n    deck.setLogArchive(deckObject.logArchive);\r\n    deck.setDOMlog(deckObject.DOMLog);\r\n    deck.setEntireDeck(deckObject.entireDeck);\r\n    return deck;\r\n};\r\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = (module) => {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t\"options\": 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkdomhacks_utility\"] = self[\"webpackChunkdomhacks_utility\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [\"vendors-node_modules_react-dom_client_js\",\"vendors-node_modules_react-router-dom_dist_index_js\",\"vendors-node_modules_reduxjs_toolkit_dist_redux-toolkit_esm_js-node_modules_react-redux_es_index_js\"], () => (__webpack_require__(\"./src/options/index.tsx\")))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n",""],"names":[],"sourceRoot":""}